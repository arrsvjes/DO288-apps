
kubeadm init   --pod-network-cidr=10.244.0.0/16   --cri-socket /run/cri-dockerd.sock --upload-certs --control-plane-endpoint=k8s-cluster.domain1.example.com


Your Kubernetes control-plane has initialized successfully!

To start using your cluster, you need to run the following as a regular user:

  mkdir -p $HOME/.kube
  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
  sudo chown $(id -u):$(id -g) $HOME/.kube/config

Alternatively, if you are the root user, you can run:

  export KUBECONFIG=/etc/kubernetes/admin.conf

You should now deploy a pod network to the cluster.
Run "kubectl apply -f [podnetwork].yaml" with one of the options listed at:
  https://kubernetes.io/docs/concepts/cluster-administration/addons/

You can now join any number of the control-plane node running the following command on each as root:

  kubeadm join k8s-cluster.domain1.example.com:6443 --token zh1z4e.67d0la0qo9o4i30x \
        --discovery-token-ca-cert-hash sha256:cf3833b57898429ecf5f8dce258dc294bafd6c298b2bbcacbc9045715a54055f \
        --control-plane --certificate-key 1c92d635bf702ce7d3d62ad4e6fa5a40c4fc41cb3da1246514aaf3bf90e78f77

Please note that the certificate-key gives access to cluster sensitive data, keep it secret!
As a safeguard, uploaded-certs will be deleted in two hours; If necessary, you can use
"kubeadm init phase upload-certs --upload-certs" to reload certs afterward.

Then you can join any number of worker nodes by running the following on each as root:

kubeadm join k8s-cluster.domain1.example.com:6443 --token zh1z4e.67d0la0qo9o4i30x \
        --discovery-token-ca-cert-hash sha256:cf3833b57898429ecf5f8dce258dc294bafd6c298b2bbcacbc9045715a54055f


Install Flannel for the Pod Network (On Master Node)

We need to install the pod network before the cluster can come up. As such we want to install the latest yaml file that flannel provides. Most installations will use the following:

kubectl apply -f https://github.com/coreos/flannel/raw/master/Documentation/kube-flannel.yml

   89  vim node2
   90  kubectl label node node1 node-role.kubernetes.io/worker=worker
   91  kubectl get nodes
   92  kubectl label node node2 node-role.kubernetes.io/worker=worker
   93  kubectl label node node3 node-role.kubernetes.io/worker=worker



